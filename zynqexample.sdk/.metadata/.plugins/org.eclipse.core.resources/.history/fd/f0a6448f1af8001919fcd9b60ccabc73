/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"

#include "xil_printf.h"
#include "xgpio.h"
#include "xparameters.h"
#include "xgpiops.h"
#include "xscugic.h"
#include "xil_exception.h"
#define PIN_DIRECTION_INPUT 	0
#define PIN_DIRECTION_OUTPUT 	1
#define LED_DELAY     			10000000
#define BUTTONS_BANK 			1
static u32 BUTTONS_MASK;
static const int BTN_PINS[4] = {46, 47, 50, 51};
static XGpio GPIO_AXI;
static XGpioPs GPIO_MIO;
static XScuGic interruptController;
static XScuGic_Config *interruptControllerConfiguration;
static void IRQ_buttonPress(void *CallBackRef, u32 Bank, u32 Status);
int configureInterruptSystem(XScuGic *interruptController, XGpioPs * GPIO, u16 GPIOInterruptID);
int configureMIO(XScuGic *interruptController, XGpioPs *GPIO_MIO, u16 deviceID, u16 gpioInterruptID);
int createButtonsMask();

#define REG_READ(addr) \
    ({int val;int a=addr; asm volatile ("ldr   %0,[%1]\n" : "=r"(val) : "r"(a)); val;})

#define REG_WRITE(addr,val) \
    ({int v = val; int a = addr; __asm volatile ("str  %1,[%0]\n" :: "r"(a),"r"(v)); v;})

#define MEMORY_BASE_ADDRESS 0x00100000
#define MEMORY_TEST_WORDCOUNT 8
#define MEMORY_STOPTEST_ADDRESS 0x00100000 + sizeof(unsigned int)*MEMORY_TEST_WORDCOUNT
#define MEMORY_END_ADDRESS 0x1fffffff
unsigned int leds = 0b1111;

int main()
{
    init_platform();
    print("Starting memory test\n\r");
    int xilOperationResult;
	volatile int Delay;
	BUTTONS_MASK = createButtonsMask();
	xilOperationResult = configureMIO(&interruptController, &GPIO_MIO, XPAR_XGPIOPS_0_DEVICE_ID, XPAR_XGPIOPS_0_INTR);
	xilOperationResult = XGpio_Initialize(&GPIO_AXI, XPAR_GPIO_0_DEVICE_ID);
	if (xilOperationResult != XST_SUCCESS) {
		xil_printf("Gpio Initialization Failed\r\n");
		return XST_FAILURE;
	}
	XGpio_SetDataDirection(&GPIO_AXI, 1, 0xf);
	unsigned volatile int address = MEMORY_BASE_ADDRESS;
	unsigned int counter = 0;
	for(address = MEMORY_BASE_ADDRESS; address < MEMORY_STOPTEST_ADDRESS; address += sizeof(unsigned int) )
	{
		REG_WRITE(address, counter%2?0xDEADBEEF:0xC0DECAFE);
		counter++;
	}
	for(address = MEMORY_BASE_ADDRESS; address < MEMORY_STOPTEST_ADDRESS; address += sizeof(unsigned int) )
	{
		xil_printf(address);print(":")REG_WRITE(address, counter%2?0xDEADBEEF:0xC0DECAFE);
		counter++;
	}
	/*while (1) {

		leds ^= 0b1000;
		XGpio_DiscreteWrite(&GPIO_AXI, 1, ~leds);

		for (Delay = 0; Delay < LED_DELAY; Delay++);

	}*/




    cleanup_platform();
    return 0;
}
int configureMIO(XScuGic *interruptController, XGpioPs *GPIO_MIO, u16 deviceID, u16 gpioInterruptID)
{
	int xilOperationResult;
	XGpioPs_Config *MIOConfig;
	MIOConfig = XGpioPs_LookupConfig(deviceID);
	xilOperationResult = XGpioPs_CfgInitialize(GPIO_MIO, MIOConfig,  MIOConfig->BaseAddr);
	if(xilOperationResult != XST_SUCCESS) return XST_FAILURE;
	xilOperationResult = XGpioPs_SelfTest(GPIO_MIO);
	if(xilOperationResult != XST_SUCCESS) return XST_FAILURE;
	XGpioPs_SetDirectionPin(GPIO_MIO, BTN_PINS[0], PIN_DIRECTION_INPUT);
	XGpioPs_SetDirectionPin(GPIO_MIO, BTN_PINS[1], PIN_DIRECTION_INPUT);
	xilOperationResult = configureInterruptSystem(interruptController, GPIO_MIO, gpioInterruptID);
	if(xilOperationResult != XST_SUCCESS) return XST_FAILURE;

}
int configureInterruptSystem(XScuGic *interruptController, XGpioPs * GPIO, u16 GPIOInterruptID)
{
	int functionResult;

	interruptControllerConfiguration = XScuGic_LookupConfig(
			XPAR_SCUGIC_SINGLE_DEVICE_ID
			);
	if(NULL == interruptControllerConfiguration) return XST_FAILURE;
	functionResult = XScuGic_CfgInitialize(
			interruptController,
			interruptControllerConfiguration,
			interruptControllerConfiguration->CpuBaseAddress
			);
	if(XST_FAILURE == functionResult) return XST_FAILURE;
	Xil_ExceptionRegisterHandler(
			XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler)XScuGic_InterruptHandler,
			interruptController
			);
	functionResult = XScuGic_Connect(
			interruptController,
			GPIOInterruptID,
			(Xil_ExceptionHandler)XGpioPs_IntrHandler,
			(void *)GPIO
			);
	if(XST_FAILURE == functionResult) return XST_FAILURE;

	XGpioPs_SetIntrType(GPIO, BUTTONS_BANK, BUTTONS_MASK, 0, 0);

	XGpioPs_SetCallbackHandler(GPIO, (void *)GPIO, IRQ_buttonPress);
	XGpioPs_IntrEnable(GPIO, BUTTONS_BANK, BUTTONS_MASK);
	XScuGic_Enable(interruptController, GPIOInterruptID);
	Xil_ExceptionEnableMask(XIL_EXCEPTION_IRQ);

	return XST_SUCCESS;
}
static void IRQ_buttonPress(void *CallBackRef, u32 Bank, u32 Status)
{
	XGpioPs *Gpio = (XGpioPs *)CallBackRef;
	int btnVal[2];
	btnVal[0] = XGpioPs_ReadPin(Gpio, BTN_PINS[0]);
	btnVal[1] = XGpioPs_ReadPin(Gpio, BTN_PINS[1]);
	if(!btnVal[0])
		leds |= 0b0001;
	else if (!btnVal[1])
		leds &= 0b1110;
	XGpioPs_IntrClear(Gpio,BUTTONS_BANK,BUTTONS_MASK);
}
int createButtonsMask()
{
	u32 mask = 0;
	u8 bankNumber = 0, pinNumberInBank = 0;
	XGpioPs_GetBankPin(46,&bankNumber,&pinNumberInBank);
	mask |= ((1UL) << pinNumberInBank);

	XGpioPs_GetBankPin(47,&bankNumber,&pinNumberInBank);
	mask |= ((1UL) << pinNumberInBank);

	XGpioPs_GetBankPin(50,&bankNumber,&pinNumberInBank);
	mask |= ((1UL) << pinNumberInBank);

	XGpioPs_GetBankPin(51,&bankNumber,&pinNumberInBank);
	mask |= ((1UL) << pinNumberInBank);
	return mask;
}
